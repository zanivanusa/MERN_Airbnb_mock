{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u017Dan\\\\Desktop\\\\sp_v4_sample\\\\frontend\\\\src\\\\components\\\\Photo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from 'react';\nimport Comments from './Comments';\nimport { UserContext } from '../userContext';\nimport TagSearch from './TagSearch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Photo(props) {\n  _s();\n  const [comment, setComment] = useState('');\n  const [isDetailView, setIsDetailView] = useState(false);\n  const userContext = useContext(UserContext);\n  const [photoData, setPhotoData] = useState([]);\n  const {\n    user\n  } = userContext;\n  const handleTagSearch = searchTerm => {\n    // Filter the photos based on the search term\n    const results = props.filter(photo => photo.tags.includes(searchTerm.toLowerCase()));\n    setSearchResults(results);\n  };\n  console.log(user);\n  useEffect(() => {\n    // Fetch the photo data and update the state\n    fetchPhotoData();\n  }, []);\n  const fetchPhotoData = async () => {\n    try {\n      const res = await fetch('http://localhost:3001/photos');\n      const data = await res.json();\n      setPhotoData(data);\n    } catch (error) {\n      console.error('Error fetching photo data:', error);\n    }\n  };\n  const handleLike = async photoId => {\n    try {\n      if (!user) {\n        console.log('User is not logged in.');\n        return;\n      }\n      await fetch(`http://localhost:3001/photos/${photoId}/like`, {\n        method: 'POST',\n        credentials: 'include'\n      });\n\n      // Perform a separate request to get the updated photo data\n      const updatedPhotoRes = await fetch(`http://localhost:3001/photos/${photoId}`);\n      const updatedPhoto = await updatedPhotoRes.json();\n\n      // Update the photo data with the updated likes\n      const updatedPhotoData = photoData.map(photo => photo._id === updatedPhoto._id ? updatedPhoto : photo);\n      setPhotoData(updatedPhotoData);\n    } catch (error) {\n      console.error('Error liking photo:', error);\n    }\n  };\n  const toggleDetailView = () => {\n    setIsDetailView(!isDetailView);\n  };\n  const handleCommentChange = event => {\n    setComment(event.target.value);\n  };\n  const handleCommentSubmit = async event => {\n    event.preventDefault();\n    if (!user) {\n      console.log('User not logged in');\n      return;\n    }\n    if (!comment) {\n      console.log('Comment field cannot be empty');\n      return;\n    }\n\n    // Make API request to create a new comment\n    const res = await fetch('http://localhost:3001/comments', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        photoId: props.photo._id,\n        content: comment,\n        postedBy: user._id\n      })\n    });\n    if (res.ok) {\n      // Comment created successfully, perform any necessary actions\n      // such as updating the comments list or refreshing the photo display\n      // ...\n\n      // Reset the comment input field\n      setComment('');\n    } else {\n      console.log('Error: Comment creation failed');\n      // Handle error if the comment creation fails\n      // ...\n    }\n  };\n\n  const publishTime = new Date(props.photo.publishTime).toLocaleString([], {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card text-dark mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: [\"Title: \", props.photo.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: [\"Posted by: \", props.photo.postedBy.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: [\"Published at: \", publishTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: [\"Likes: \", props.photo.likes]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), user && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleLike(props.photo._id),\n        children: props.photo.likedBy.includes(user._id) ? 'Unlike' : 'Like'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"card-img\",\n      src: 'http://localhost:3001/' + props.photo.path,\n      alt: props.photo.name,\n      onClick: () => toggleDetailView()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), isDetailView && user && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleCommentSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: comment,\n          onChange: handleCommentChange,\n          placeholder: \"Enter your comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), isDetailView && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: /*#__PURE__*/_jsxDEV(Comments, {\n        photoId: props.photo._id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s(Photo, \"k8wgsv8sKTGdgCNEDsBIDZ5Zp4c=\");\n_c = Photo;\nexport default Photo;\nvar _c;\n$RefreshReg$(_c, \"Photo\");","map":{"version":3,"names":["React","useState","useContext","useEffect","Comments","UserContext","TagSearch","jsxDEV","_jsxDEV","Fragment","_Fragment","Photo","props","_s","comment","setComment","isDetailView","setIsDetailView","userContext","photoData","setPhotoData","user","handleTagSearch","searchTerm","results","filter","photo","tags","includes","toLowerCase","setSearchResults","console","log","fetchPhotoData","res","fetch","data","json","error","handleLike","photoId","method","credentials","updatedPhotoRes","updatedPhoto","updatedPhotoData","map","_id","toggleDetailView","handleCommentChange","event","target","value","handleCommentSubmit","preventDefault","headers","body","JSON","stringify","content","postedBy","ok","publishTime","Date","toLocaleString","year","month","day","hour","minute","second","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","username","likes","onClick","likedBy","src","path","alt","onSubmit","type","onChange","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Å½an/Desktop/sp_v4_sample/frontend/src/components/Photo.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport Comments from './Comments';\r\nimport { UserContext } from '../userContext';\r\nimport TagSearch from './TagSearch';\r\n\r\nfunction Photo(props) {\r\n  const [comment, setComment] = useState('');\r\n  const [isDetailView, setIsDetailView] = useState(false);\r\n  const userContext = useContext(UserContext);\r\n  const [photoData, setPhotoData] = useState([]);\r\n  \r\n  const { user } = userContext;\r\n\r\n  const handleTagSearch = (searchTerm) => {\r\n    // Filter the photos based on the search term\r\n    const results = props.filter((photo) =>\r\n      photo.tags.includes(searchTerm.toLowerCase())\r\n    );\r\n    setSearchResults(results);\r\n  };\r\n\r\n\r\n  console.log(user);\r\n\r\n  useEffect(() => {\r\n    // Fetch the photo data and update the state\r\n    fetchPhotoData();\r\n  }, []);\r\n\r\n  const fetchPhotoData = async () => {\r\n    try {\r\n      const res = await fetch('http://localhost:3001/photos');\r\n      const data = await res.json();\r\n      setPhotoData(data);\r\n    } catch (error) {\r\n      console.error('Error fetching photo data:', error);\r\n    }\r\n  };\r\n\r\n  const handleLike = async (photoId) => {\r\n    try {\r\n      if (!user) {\r\n        console.log('User is not logged in.');\r\n        return;\r\n      }\r\n      await fetch(`http://localhost:3001/photos/${photoId}/like`, {\r\n        method: 'POST',\r\n        credentials: 'include',\r\n      });\r\n\r\n      // Perform a separate request to get the updated photo data\r\n      const updatedPhotoRes = await fetch(`http://localhost:3001/photos/${photoId}`);\r\n      const updatedPhoto = await updatedPhotoRes.json();\r\n\r\n      // Update the photo data with the updated likes\r\n      const updatedPhotoData = photoData.map((photo) => (photo._id === updatedPhoto._id ? updatedPhoto : photo));\r\n      setPhotoData(updatedPhotoData);\r\n    } catch (error) {\r\n      console.error('Error liking photo:', error);\r\n    }\r\n  };\r\n\r\n  const toggleDetailView = () => {\r\n    setIsDetailView(!isDetailView);\r\n  };\r\n\r\n  const handleCommentChange = (event) => {\r\n    setComment(event.target.value);\r\n  };\r\n\r\n  const handleCommentSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!user) {\r\n      console.log('User not logged in');\r\n      return;\r\n    }\r\n\r\n    if (!comment) {\r\n      console.log('Comment field cannot be empty');\r\n      return;\r\n    }\r\n\r\n    // Make API request to create a new comment\r\n    const res = await fetch('http://localhost:3001/comments', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        photoId: props.photo._id,\r\n        content: comment,\r\n        postedBy: user._id,\r\n      }),\r\n    });\r\n\r\n    if (res.ok) {\r\n      // Comment created successfully, perform any necessary actions\r\n      // such as updating the comments list or refreshing the photo display\r\n      // ...\r\n\r\n      // Reset the comment input field\r\n      setComment('');\r\n    } else {\r\n      console.log('Error: Comment creation failed');\r\n      // Handle error if the comment creation fails\r\n      // ...\r\n    }\r\n  };\r\n\r\n  const publishTime = new Date(props.photo.publishTime).toLocaleString([], {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    second: '2-digit',\r\n  });\r\n\r\n  return (\r\n    <div className=\"card text-dark mb-4\">\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">Title: {props.photo.name}</h5>\r\n        <p className=\"card-text\">Posted by: {props.photo.postedBy.username}</p>\r\n        <p className=\"card-text\">Published at: {publishTime}</p>\r\n        <p className=\"card-text\">Likes: {props.photo.likes}</p>\r\n\r\n        {user && (\r\n          <button onClick={() => handleLike(props.photo._id)}>\r\n            {props.photo.likedBy.includes(user._id) ? 'Unlike' : 'Like'}\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      <img\r\n        className=\"card-img\"\r\n        src={'http://localhost:3001/' + props.photo.path}\r\n        alt={props.photo.name}\r\n        onClick={() => toggleDetailView()}\r\n      />\r\n\r\n      {isDetailView && user && (\r\n        <>\r\n          {/* Comment form */}\r\n          <form onSubmit={handleCommentSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              value={comment}\r\n              onChange={handleCommentChange}\r\n              placeholder=\"Enter your comment\"\r\n            />\r\n            <button type=\"submit\">Add Comment</button>\r\n          </form>\r\n        </>\r\n      )}\r\n      {isDetailView &&\r\n      \r\n      <div className=\"comments\">\r\n          <Comments photoId={props.photo._id} />\r\n\r\n          </div>\r\n      \r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Photo;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}