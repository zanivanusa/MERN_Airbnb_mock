{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u017Dan\\\\Desktop\\\\sp_v4_sample\\\\frontend\\\\src\\\\components\\\\Photo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from 'react';\nimport Comment from './Comment';\nimport { UserContext } from '../userContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Photo(props) {\n  _s();\n  var _user;\n  const [comment, setComment] = useState('');\n  const [isDetailView, setIsDetailView] = useState(false);\n  const userContext = useContext(UserContext);\n  const [likedByUser, setLikedByUser] = useState(props.photo.likedBy.includes((_user = user) === null || _user === void 0 ? void 0 : _user._id));\n  useEffect(() => {\n    var _user2;\n    setLikedByUser(props.photo.likedBy.includes((_user2 = user) === null || _user2 === void 0 ? void 0 : _user2._id));\n  }, [props.photo.likedBy, user]);\n  const handleCommentChange = event => {\n    setComment(event.target.value);\n  };\n  const handleLikeClick = async () => {\n    if (!user) {\n      console.log(\"User not logged in\");\n      return;\n    }\n    const hasLiked = props.photo.likedBy.includes(user._id);\n\n    // Make API request to like/unlike the photo\n    const res = await fetch(`http://localhost:3001/photos/${props.photo._id}/like`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId: user._id\n      })\n    });\n    if (res.ok) {\n      // Like/unlike successful, update the number of likes and the like status\n      const updatedPhoto = {\n        ...props.photo\n      };\n      if (hasLiked) {\n        // User has already liked the post, so unlike it\n        updatedPhoto.likes -= 1;\n        updatedPhoto.likedBy = updatedPhoto.likedBy.filter(userId => userId !== user._id);\n      } else {\n        // User has not liked the post, so like it\n        updatedPhoto.likes += 1;\n        updatedPhoto.likedBy.push(user._id);\n      }\n\n      // Update the photo in the parent component by invoking a callback function passed as a prop\n      if (props.onLikeUpdate) {\n        props.onLikeUpdate(updatedPhoto);\n      }\n\n      // Update the likedByUser state\n      setLikedByUser(!hasLiked);\n    } else {\n      console.log(\"Error occurred while liking/unliking the photo\");\n    }\n  };\n  const toggleDetailView = () => {\n    setIsDetailView(!isDetailView);\n  };\n  const handleCommentSubmit = async event => {\n    event.preventDefault();\n    if (!user) {\n      console.log(\"User not logged in\");\n      return;\n    }\n    if (!comment) {\n      console.log(\"Comment field cannot be empty\");\n      return;\n    }\n\n    // Make API request to create a new comment\n    const res = await fetch('http://localhost:3001/comments', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        photoId: props.photo._id,\n        content: comment,\n        postedBy: user._id\n      })\n    });\n    if (res.ok) {\n      // Comment created successfully, perform any necessary actions\n      // such as updating the comments list or refreshing the photo display\n      // ...\n\n      // Reset the comment input field\n      setComment('');\n    } else {\n      console.log(\"Error: Comment creation failed\");\n      // Handle error if the comment creation fails\n      // ...\n    }\n  };\n\n  const publishTime = new Date(props.photo.publishTime).toLocaleString([], {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card text-dark mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        className: \"card-title\",\n        children: [\"Title: \", props.photo.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: [\"Posted by: \", props.photo.postedBy.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: [\"Published at: \", publishTime]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"card-text\",\n        children: [\"Likes: \", props.photo.likes]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLikeClick,\n        children: likedByUser ? 'Unlike' : 'Like'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"card-img\",\n      src: \"http://localhost:3001/\" + props.photo.path,\n      alt: props.photo.name,\n      onClick: () => toggleDetailView()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), isDetailView && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleCommentSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: comment,\n          onChange: handleCommentChange,\n          placeholder: \"Enter your comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comments\",\n        children: props.photo.comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, {\n          comment: comment\n        }, comment._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(Photo, \"2W2MJQyjYLxPNkW5cztBC139HSA=\");\n_c = Photo;\nexport default Photo;\nvar _c;\n$RefreshReg$(_c, \"Photo\");","map":{"version":3,"names":["React","useState","useContext","useEffect","Comment","UserContext","jsxDEV","_jsxDEV","Fragment","_Fragment","Photo","props","_s","_user","comment","setComment","isDetailView","setIsDetailView","userContext","likedByUser","setLikedByUser","photo","likedBy","includes","user","_id","_user2","handleCommentChange","event","target","value","handleLikeClick","console","log","hasLiked","res","fetch","method","headers","body","JSON","stringify","userId","ok","updatedPhoto","likes","filter","push","onLikeUpdate","toggleDetailView","handleCommentSubmit","preventDefault","photoId","content","postedBy","publishTime","Date","toLocaleString","year","month","day","hour","minute","second","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","username","onClick","src","path","alt","onSubmit","type","onChange","placeholder","comments","map","_c","$RefreshReg$"],"sources":["C:/Users/Å½an/Desktop/sp_v4_sample/frontend/src/components/Photo.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport Comment from './Comment';\r\nimport { UserContext } from '../userContext';\r\n\r\nfunction Photo(props) {\r\n  const [comment, setComment] = useState('');\r\n  const [isDetailView, setIsDetailView] = useState(false);\r\n  const userContext = useContext(UserContext); \r\n  const [likedByUser, setLikedByUser] = useState(props.photo.likedBy.includes(user?._id));\r\n\r\n  useEffect(() => {\r\n    setLikedByUser(props.photo.likedBy.includes(user?._id));\r\n  }, [props.photo.likedBy, user]);\r\n\r\n  const handleCommentChange = (event) => {\r\n    setComment(event.target.value);\r\n  };\r\n\r\n  const handleLikeClick = async () => {\r\n  if (!user) {\r\n    console.log(\"User not logged in\");\r\n    return;\r\n  }\r\n\r\n  const hasLiked = props.photo.likedBy.includes(user._id);\r\n\r\n  // Make API request to like/unlike the photo\r\n  const res = await fetch(`http://localhost:3001/photos/${props.photo._id}/like`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      userId: user._id,\r\n    }),\r\n  });\r\n\r\n  if (res.ok) {\r\n    // Like/unlike successful, update the number of likes and the like status\r\n    const updatedPhoto = { ...props.photo };\r\n\r\n    if (hasLiked) {\r\n      // User has already liked the post, so unlike it\r\n      updatedPhoto.likes -= 1;\r\n      updatedPhoto.likedBy = updatedPhoto.likedBy.filter((userId) => userId !== user._id);\r\n    } else {\r\n      // User has not liked the post, so like it\r\n      updatedPhoto.likes += 1;\r\n      updatedPhoto.likedBy.push(user._id);\r\n    }\r\n\r\n    // Update the photo in the parent component by invoking a callback function passed as a prop\r\n    if (props.onLikeUpdate) {\r\n      props.onLikeUpdate(updatedPhoto);\r\n    }\r\n\r\n    // Update the likedByUser state\r\n    setLikedByUser(!hasLiked);\r\n  } else {\r\n    console.log(\"Error occurred while liking/unliking the photo\");\r\n  }\r\n};\r\n\r\n  const toggleDetailView = () => {\r\n    setIsDetailView(!isDetailView);\r\n  };\r\n\r\n  const handleCommentSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!user) {\r\n      console.log(\"User not logged in\");\r\n      return;\r\n    }\r\n\r\n    if (!comment) {\r\n      console.log(\"Comment field cannot be empty\");\r\n      return;\r\n    }\r\n\r\n    // Make API request to create a new comment\r\n    const res = await fetch('http://localhost:3001/comments', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        photoId: props.photo._id,\r\n        content: comment,\r\n        postedBy: user._id,\r\n      }),\r\n    });\r\n\r\n    if (res.ok) {\r\n      // Comment created successfully, perform any necessary actions\r\n      // such as updating the comments list or refreshing the photo display\r\n      // ...\r\n\r\n      // Reset the comment input field\r\n      setComment('');\r\n    } else {\r\n      console.log(\"Error: Comment creation failed\");\r\n      // Handle error if the comment creation fails\r\n      // ...\r\n    }\r\n  };\r\n\r\n  const publishTime = new Date(props.photo.publishTime).toLocaleString([], {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    second: '2-digit',\r\n  });\r\n\r\n  return (\r\n    <div className=\"card text-dark mb-4\">\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">Title: {props.photo.name}</h5>\r\n        <p className=\"card-text\">Posted by: {props.photo.postedBy.username}</p>\r\n        <p className=\"card-text\">Published at: {publishTime}</p>\r\n        <p className=\"card-text\">Likes: {props.photo.likes}</p>\r\n        <button onClick={handleLikeClick}>\r\n          {likedByUser ? 'Unlike' : 'Like'}\r\n        </button>\r\n      </div>\r\n      <img\r\n        className=\"card-img\"\r\n        src={\"http://localhost:3001/\" + props.photo.path}\r\n        alt={props.photo.name}\r\n        onClick={() => toggleDetailView()}\r\n      />\r\n\r\n      {isDetailView && (\r\n        <>\r\n          {/* Comment form */}\r\n          <form onSubmit={handleCommentSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              value={comment}\r\n              onChange={handleCommentChange}\r\n              placeholder=\"Enter your comment\"\r\n            />\r\n            <button type=\"submit\">Add Comment</button>\r\n          </form>\r\n\r\n          {/* Render comments */}\r\n          <div className=\"comments\">\r\n            {props.photo.comments.map((comment) => (\r\n              <Comment key={comment._id} comment={comment} />\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Photo;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}